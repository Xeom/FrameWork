
This project is designed for educational use, specifically teaching basic programming.

It is designed to be an iteration on "scratch", which while excellent, is not suitable for more advanced users.

When the application is started, the __init__.py file should be called, which prompts the user to enter a directory to run. This directory should contain a series of .py files, which will all be loaded. The user code need not handle events or such - they are given to it by the manager. Events to call are marked with ## flags in the code. All the code after one of these flags, until the next is called upon the event specified by the flag. These events are as follows:

## Quit
This code is called when the application is told to shut down.

## Forever 
This code is called constantly.

## MouseMove
This code is called whenever the mouse moves within the window.

## MouseDown
This code is called when a mouse-button is pressed.

## MouseUp
This code is called when a mouse-button is unpressed.

## KeyPress
This code is called whenever any key is pressed.

## KeyDown [KEY]
This code is called whenever [KEY] is pressed.

## KeyUp [KEY]
This code is called whenever [KEY] is unpressed.

Before many of these events, specific variables relating to them are often set by the manager. These are often essential in interpreting the events. The variables are stored in a class instance called "Event". The variables set are as follows:

 |  MousePos - The position of the mouse
 |  MouseRel - The relative movement of the mouse between this and the last MouseMove event.
 |  Unicode - The unicode produced by the last keypress.
 |  Mod - The modifier keys pressed during last keypress.
 |  KeyDown - The last key pressed.
 |  KeyUp - The last key released.
 |  KeysDown - A list of all keys that are down.
 |  MouseButtons - A list of all mousebuttons that are pressed.

While all of these variables can be used anywhere, it is recommended that you use them in the corresponding events, as this is when they will be updated, and less load will be put on your application.

The Manager, which controls what aspects of the users code are called, and keeps everything running itself, is accessible in the user's scope through the name "Game". Many of the methods it provides are essential.

class Manager(ObjectPath, GamePath)
 |  Interfaces with pygame, manages events,and calls scripts as needed.
 |  
 |  ObjectPath is the path of the lib directory to load all files from.
 |  GamePath is the path from which to load the user scripts.
 |  TPS is the target number of ticks per second.
 |  
 |  Methods defined here:
 |  
 |  CheckScreen()
 |      Used internally to check that a screen exists.
 |  
 |  ClearCanvas()
 |      Clears the canvas.  
 |
 |  ClearScreen()
 |      Clears the screen.
 |  
 |  CreateScreen(x, y, resizable=False)
 |      Initiates a new display window.
 |      
 |      x is the width of the window to be created.
 |      y is the height of the window to be created.
 |  
 |  GetFPS()
 |      Returns the number of times the screen is updated per second.
 |  
 |  GetSize()
 |      Get the size of the display surface
 |  
 |  GetTPS()
 |      Returns the number of ticks per second.
 |  
 |  New(cls, **kwargs)
 |      Adds a new SubSurface to the screen.
 |      
 |      cls is the class to create an instance of.
 |      any extra args of keyword args are given to the class.
 |  
 |  Tick()
 |      Handles all events, and runs all appropriate scripts.
 |  
 |  Update()
 |      Updates the screen.
 
 